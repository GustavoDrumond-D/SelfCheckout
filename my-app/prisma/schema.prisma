// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id             String         @id @default(uuid())
  name           String
  slug           String
  description    String
  avatarImageUrl String
  coverImageUrl  String
  menuCategories MenuCategory[]
  products       Product[]
  orders         Order[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model MenuCategory {
  id           String     @id @default(uuid())
  name         String
  restaurantId String
  createdAt    DateTime
  updatedAt    DateTime
  products     Product[]
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
}

model Product {
  id             String         @id @default(uuid())
  name           String
  description    String?
  price          Float
  ingredients    String?
  imageUrl       String?
  restaurantID   String
  createdAt      DateTime
  updatedAt      DateTime
  menuCategoryId String
  menuCategory   MenuCategory   @relation(fields: [menuCategoryId], references: [id])
  restaurant     Restaurant     @relation(fields: [restaurantID], references: [id])
  OrderProducts  OrderProduct[]
}

model Order {
  id                Int               @id @default(autoincrement())
  total             Float
  status            OrderStatus
  consumptionMethod ConsumptionMethod
  OrderProducts     OrderProduct[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  restaurantId      String
  restaurant        Restaurant        @relation(fields: [restaurantId], references: [id])
}

model OrderProduct {
  id           String   @id @default(uuid())
  product      Product  @relation(fields: [productId], references: [id])
  order        Order    @relation(fields: [orderId], references: [id])
  restaurantId String
  orderId      Int
  productId    String
  quantity     Int
  price        Float
  cretatedAt   DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  FINISHED
}

enum ConsumptionMethod {
  TAKEAWAY
  DINE_IN
}
